---
kind: pipeline
type: kubernetes
name: OpsData

steps:

  - name: Go-Build-API
    image: golang
    environment:
      CGO_ENABLED: 0
    commands:
      - cd ./api/
      - go get
      - go build -o main

  - name: Docker-Build-API
    image: plugins/docker
    settings:
      custom_dns: [ 1.1.1.1, 8.8.8.8 ]
      purge: false
      registry: registry.support.tools
      repo: registry.support.tools/opsdata/api
      dockerfile: ./api/Dockerfile
      context: ./api/
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest
      cache_from: "registry.support.tools/opsdata/api:latest"
      username:
        from_secret: registry-username
      password:
        from_secret: registry-password
      depends_on:
        - Go-Build-API

  - name: Docker-Build-UI
    image: plugins/docker
    settings:
      custom_dns: [ 1.1.1.1, 8.8.8.8 ]
      purge: false
      registry: registry.support.tools
      repo: registry.support.tools/opsdata/ui
      dockerfile: ./ui/Dockerfile
      context: ./ui/
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest
      cache_from: "registry.support.tools/opsdata/ui:latest"
      username:
        from_secret: registry-username
      password:
        from_secret: registry-password

  - name: Customize-kube-files
    image: supporttools/kube-builder:32
    pull: true
    environment:
      APPENV: ${DRONE_COMMIT_BRANCH}
    commands:
      - bash ./k8s/deploy.sh
    depends_on:
      - Docker-Build-API
      - Docker-Build-UI

  - name: Deploy-to-Dev
    image: supporttools/kube-builder:32
    pull: true
    settings:
      custom_dns: [ 1.1.1.1, 8.8.8.8 ]
      kubernetes_server:
        from_secret: b1-k3s-prd_server
      kubernetes_token:
        from_secret: b1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: registry-password
      USERNAME:
        from_secret: registry-username
      JWT:
        from_secret: jwt-secret-key
    commands:
      - kubectl label --overwrite ns opsdata-dev team=opsdata
      - kubectl label --overwrite ns opsdata-dev app=opsdata
      - kubectl label --overwrite ns opsdata-dev ns-purge=false
      - kubectl label --overwrite ns opsdata-dev class=dev
      - kubectl annotate --overwrite ns opsdata-dev field.cattle.io/projectId=c-jrfsw:p-w678r
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-dev --history-max 3 -f ./helm-config-ready/mariadb-galera/values.yaml bitnami/mariadb-galera
      - kubectl -n opsdata-dev create secret generic jwt-secret-key --from-literal=jwt-secret-key=${JWT}
      - kubectl apply -n opsdata-dev -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-dev -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-dev -f ./k8s/ingress/dev.yaml
      - kubectl apply -n opsdata-dev -f ./k8s/hpa/dev.yaml
      - kubectl apply -n monitoring -f ./k8s/monitoring/servicemonitor-dev.yaml
      - kubectl wait -n opsdata-dev --for=condition=available --timeout=600s deployment/opsdata-api
      - kubectl wait -n opsdata-dev --for=condition=available --timeout=600s deployment/opsdata-ui
    depends_on:
      - Customize-kube-files

  - name: Deploy-to-Staging
    image: supporttools/kube-builder:32
    pull: true
    settings:
      custom_dns: [ 1.1.1.1, 8.8.8.8 ]
      kubernetes_server:
        from_secret: b1-k3s-prd_server
      kubernetes_token:
        from_secret: b1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: registry-password
      USERNAME:
        from_secret: registry-username
      JWT:
        from_secret: jwt-secret-key
    commands:
      - kubectl label --overwrite ns opsdata-staging team=opsdata
      - kubectl label --overwrite ns opsdata-staging app=opsdata
      - kubectl label --overwrite ns opsdata-staging ns-purge=false
      - kubectl label --overwrite ns opsdata-staging class=staging
      - kubectl annotate --overwrite ns opsdata-staging field.cattle.io/projectId=c-jrfsw:p-w678r
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-staging --history-max 3 -f ./helm-config-ready/mariadb-galera/values.yaml bitnami/mariadb-galera
      - kubectl -n opsdata-staging create secret generic jwt-secret-key --from-literal=jwt-secret-key=${JWT}
      - kubectl apply -n opsdata-staging -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-staging -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-staging -f ./k8s/ingress/staging.yaml
      - kubectl apply -n opsdata-staging -f ./k8s/hpa/staging.yaml
      - kubectl apply -n monitoring -f ./k8s/monitoring/servicemonitor-staging.yaml
      - kubectl wait -n opsdata-staging --for=condition=available --timeout=600s deployment/opsdata
    when:
     event:
     - deployment
     - promote
     target:
     - staging
    depends_on:
      - Customize-kube-files

  - name: Deploy-to-Production
    image: supporttools/kube-builder:32
    pull: true
    settings:
      custom_dns: [ 1.1.1.1, 8.8.8.8 ]
      kubernetes_server:
        from_secret: b1-k3s-prd_server
      kubernetes_token:
        from_secret: b1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: registry-password
      USERNAME:
        from_secret: registry-username
      JWT:
        from_secret: jwt-secret-key
    commands:
      - kubectl label --overwrite ns opsdata-production team=opsdata
      - kubectl label --overwrite ns opsdata-production app=opsdata
      - kubectl label --overwrite ns opsdata-production ns-purge=false
      - kubectl label --overwrite ns opsdata-production class=production
      - kubectl annotate --overwrite  ns opsdata-production field.cattle.io/projectId=c-jrfsw:p-w678r
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-production --history-max 3 -f ./helm-config-ready/mariadb-galera/values.yaml bitnami/mariadb-galera
      - kubectl -n opsdata-production create secret generic jwt-secret-key --from-literal=jwt-secret-key=${JWT}
      - kubectl apply -n opsdata-production -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-production -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-production -f ./k8s/ingress/production-root.yaml
      - kubectl apply -n opsdata-production -f ./k8s/ingress/production-www.yaml
      - kubectl apply -n opsdata-production -f ./k8s/hpa/production.yaml
      - kubectl apply -n monitoring -f ./k8s/monitoring/servicemonitor-production.yaml
      - kubectl wait -n opsdata-production --for=condition=available --timeout=600s deployment/opsdata
    when:
     event:
     - deployment
     - promote
     target:
     - production
    depends_on:
      - Customize-kube-files

image_pull_secrets:
- regcreds
