---
kind: pipeline
type: kubernetes
name: OpsData-Build-amd64

platform:
  os: linux
  arch: amd64

steps:
  - name: Go-Build-API
    image: golang
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    environment:
      CGO_ENABLED: 0
    commands:
      - cd ./api/
      - go get
      - go build -o main
    resources:
      limits:
        cpu: 2000
        memory: 4000MiB
      requests:
        cpu: 1000
        memory: 2000MiB

  - name: Docker-Build-API
    image: plugins/docker
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      purge: false
      registry: a1-harbor.support.tools
      repo: a1-harbor.support.tools/opsdata/api
      dockerfile: ./api/Dockerfile
      context: ./api/
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest
      cache_from: "a1-harbor.support.tools/opsdata/api:latest"
      username:
        from_secret: harbor-username
      password:
        from_secret: harbor-password

  - name: Docker-Build-UI
    image: plugins/docker
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      purge: false
      registry: a1-harbor.support.tools
      repo: a1-harbor.support.tools/opsdata/ui
      dockerfile: ./ui/Dockerfile
      context: ./ui/
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest
      cache_from: "a1-harbor.support.tools/opsdata/ui:latest"
      username:
        from_secret: harbor-username
      password:
        from_secret: harbor-password

  - name: Customize-kube-files
    image: supporttools/kube-builder:32
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    environment:
      APPENV: ${DRONE_COMMIT_BRANCH}
      JWT:
        from_secret: jwt-secret-key
    commands:
      - bash ./k8s/deploy.sh

  - name: Deploy-to-User
    image: supporttools/kube-builder:32
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      kubernetes_server:
        from_secret: a1-k3s-prd_server
      kubernetes_token:
        from_secret: a1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: harbor-password
      USERNAME:
        from_secret: harbor-username
    commands:
      - REPO_USER=`echo ${DRONE_REPO} | awk -F'/' '{print $1}'`
      - if ! kubectl get ns opsdata-$REPO_USER; then kubectl create ns opsdata-$REPO_USER; fi
      - kubectl label ns opsdata-$REPO_USER team=opsdata --overwrite
      - kubectl label ns opsdata-$REPO_USER app=opsdata --overwrite
      - kubectl label ns opsdata-$REPO_USER ns-purge=false --overwrite
      - kubectl label ns opsdata-$REPO_USER team=opsdata --overwrite
      - kubectl annotate ns opsdata-$REPO_USER field.cattle.io/projectId=c-hq794:p-m4pgb --overwrite
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-$REPO_USER --history-max 3 -f /drone/src/helm-config-ready/mariadb-galera/master.yaml bitnami/mariadb-galera
      - kubectl apply -n opsdata-$REPO_USER  -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-$REPO_USER  -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-$REPO_USER  -f ./k8s/ingress/master.yaml
      - kubectl apply -n opsdata-$REPO_USER  -f ./k8s/hpa/master.yaml

  - name: Deploy-to-Dev
    image: supporttools/kube-builder:32
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      kubernetes_server:
        from_secret: a1-k3s-prd_server
      kubernetes_token:
        from_secret: a1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: harbor-password
      USERNAME:
        from_secret: harbor-username
    commands:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-dev --history-max 3 -f /drone/src/helm-config-ready/mariadb-galera/dev.yaml bitnami/mariadb-galera
      - kubectl apply -n opsdata-dev -f ./k8s/configmap/dev.yaml
      - kubectl apply -n opsdata-dev -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-dev -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-dev -f ./k8s/ingress/dev.yaml
      - kubectl apply -n opsdata-dev -f ./k8s/hpa/dev.yaml
      - kubectl apply -n prometheus -f ./k8s/monitoring/servicemonitor-dev.yaml
    when:
     event:
     - deployment
     - promote
     target:
     - dev

  - name: Deploy-to-Staging
    image: supporttools/kube-builder:32
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      kubernetes_server:
        from_secret: a1-k3s-prd_server
      kubernetes_token:
        from_secret: a1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: harbor-password
      USERNAME:
        from_secret: harbor-username
      JWT:
        from_secret: jwt-secret-key
    commands:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-staging --history-max 3 -f /drone/src/helm-config-ready/mariadb-galera/staging.yaml bitnami/mariadb-galera
      - kubectl apply -n opsdata-staging -f ./k8s/configmap/staging.yaml
      - kubectl -n opsdata-staging create secret generic jwt-secret-key --from-literal=jwt-secret-key=${JWT} -o yaml --dry-run | kubectl apply -f -
      - kubectl apply -n opsdata-staging -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-staging -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-staging -f ./k8s/ingress/staging.yaml
      - kubectl apply -n opsdata-staging -f ./k8s/hpa/staging.yaml
      - kubectl apply -n prometheus -f ./k8s/monitoring/servicemonitor-staging.yaml
      - kubectl wait -n opsdata-staging --for=condition=available --timeout=600s deployment/opsdata
    when:
     event:
     - deployment
     - promote
     target:
     - staging

  - name: Deploy-to-Production
    image: supporttools/kube-builder:32
    custom_dns: [ 172.27.2.23, 172.27.2.24 ]
    settings:
      kubernetes_server:
        from_secret: a1-k3s-prd_server
      kubernetes_token:
        from_secret: a1-k3s-prd_token
    environment:
      PASSWORD:
        from_secret: harbor-password
      USERNAME:
        from_secret: harbor-username
      JWT:
        from_secret: jwt-secret-key
    commands:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm upgrade --install opsdata --namespace opsdata-production --history-max 3 -f /drone/src/helm-config-ready/mariadb-galera/production.yaml bitnami/mariadb-galera
      - kubectl apply -n opsdata-production -f ./k8s/configmap/staging.yaml
      - kubectl -n opsdata-production create secret generic jwt-secret-key --from-literal=jwt-secret-key=${JWT}
      - kubectl apply -n opsdata-production -f ./k8s/deployment-ready/
      - kubectl apply -n opsdata-production -f ./k8s/services/service.yaml
      - kubectl apply -n opsdata-production -f ./k8s/ingress/production-root.yaml
      - kubectl apply -n opsdata-production -f ./k8s/ingress/production-www.yaml
      - kubectl apply -n opsdata-production -f ./k8s/hpa/production.yaml
      - kubectl apply -n prometheus -f ./k8s/monitoring/servicemonitor-production.yaml
      - kubectl wait -n opsdata-production --for=condition=available --timeout=600s deployment/opsdata
    when:
     event:
     - deployment
     - promote
     target:
     - production

node_selector:
  beta.kubernetes.io/arch: amd64
  drone-runner: true

image_pull_secrets:
- regcreds